coursor.execute("""CREATE TABLE IF NOT EXISTS categories(
    id INTEGER PRIMARI KEY,
    name TEXT,
    FOREIGN KEY id_categories INTEGER REFERENCES categories(id)
)""")
coursor.execute("INSERT INTO categories VALUES(?,?,?);", (1, "Сделать заказ", 1))
                "INSERT INTO admin      VALUES(?,?)       ;", (1, 'shop')
connect.commit()

        coursor_user_basket.execute("""CREATE TABLE IF NOT EXISTS user_basket(
            _id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            user_id TEXT,
            datetime TEXT
        );""")


    # coursor.execute("INSERT INTO categories VALUES(?,?,?);", (1, 'shop', 1)) DEFAULT 1
    # coursor.execute("""CREATE TABLE admin(
    #     _id    INTEGER PRIMARY KEY AUTOINCREMENT, 
    #     name  TEXT
    # );""")
    # coursor.execute("""CREATE TABLE categories(
    #     _id INTEGER PRIMARY KEY AUTOINCREMENT, 
    #     title TEXT,
    #     nodelete NUMERIC NOT NULL CHECK (nodelete IN (0,1)) DEFAULT 1,
    #     id_categories INTEGER,
    #     FOREIGN KEY(id_categories) REFERENCES categories(_id)
    # );""")
    coursor.execute('''CREATE TABLE product(
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        about TEXT DEFAULT '',
        price INTEGER,
        photo_src TEXT,
        id_categories INTEGER  NOT NULL,
        nodelete NUMERIC NOT NULL CHECK (nodelete IN (0,1)) DEFAULT 1,
        FOREIGN KEY (id_categories) REFERENCES categories(_id)
    );
    ''')
    connect.commit()


            coursor_user_data.execute(f"""CREATE TABLE IF NOT EXISTS {title_for_table}(
            _id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_name TEXT,
            surname TEXT,
            patronymic TEXT,
            phone_nuber INTEGER,
            city TEXT,
            address TEXT
        )""")













































        try:
            if product_data["do"] == "photo_src":
                file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                src = 'photo/' + generate_name("filename") + ".jpg"
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file)
                product_data["photo_src"] = src
                insert_db("product", None, product_data["title"], product_data["about"], product_data["price"],
                          product_data["photo_src"], int(user_road[-1]), 1)
                do_order(message)
        except TypeError:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("Отмена")
            img = open("photo/send_photo.png", 'rb')
            product_data["do"] = "photo_src"
            bot.send_photo(message.from_user.id, img, "Отправь повторно, сделав как на картинке", reply_markup=markup)
            bot.register_next_step_handler(message, add_product)